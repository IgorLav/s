{"version":3,"sources":["layout/header/header.component.tsx","components/logo/logo.component.tsx","components/core/page/page.component.tsx","components/smart-menu/constants.ts","components/smart-menu/smart-menu-item.component.tsx","components/smart-menu/smart-menu.component.tsx","modules/search/services/actions.ts","modules/search/services/constants.ts","components/core/button/button.component.tsx","modules/search/components/filter-bar/components/filter-body.component.tsx","components/core/dropdown/dropdown.component.tsx","components/core/accordion/accordion.component.tsx","modules/search/components/filter-bar/components/filter.view.tsx","components/core/checkbox/checkbox.component.tsx","modules/search/components/filter-bar/components/filter.controller.tsx","components/collapsible-handler/collapsible.handler.ts","modules/search/services/utils/index.ts","modules/search/components/filter-bar/filters.controller.tsx","components/core/utils/noop.ts","components/core/pills/pill-item.component.tsx","components/core/pills/pills.component.tsx","modules/search/components/selected-filters/selected-filters.component.tsx","modules/search/search-page.controller.tsx","layout/root/app.tsx","modules/search/services/reducers.ts","services/reducers.ts","store/index.ts","index.tsx"],"names":["Header","cssClass","children","classes","classNames","className","defaultProps","Logo","href","title","src","process","width","height","alt","PageComponent","MENU_CSS_CLASSES","SmartMenuItemComponent","props","childrenRenderer","menuItemData","itemCssClass","TIMEOUT_DELAY","SmartMenuComponent","resizeTimer","state","windowWidth","window","innerWidth","responsive","sort","a","b","maxWidth","componentWillUnmount","removeEventListener","onResize","clearTimeout","setTimeout","setState","prepareMenuItems","data","length","matchedBreakpoint","getMatchedBreakpoint","wrapItems","visibleItems","slice","wrappedItems","mapVisibleItems","mapWrappedItems","menuItemRenderer","map","itemData","key","id","find","item","wrappedItemsRenderer","wrappedItemsTitle","addEventListener","this","Component","removeSelectedFilter","dispatch","type","payload","BTN_CSS_CLASSES","BTN_TYPES","Button","caption","handler","disabled","btnClasses","onClick","PureComponent","FilterBody","changed","onSave","onClose","CSS_CLASSES","wrapper","bottom","body","handlerActive","Dropdown","setWrapperRef","createRef","dropdownBodyRef","recalculateStyles","isOpen","refElement","current","style","left","requestAnimationFrame","boundingEl","getBoundingClientRect","isOutOfRight","right","bodyRender","ref","handleClickOutside","event","refEl","contains","target","document","onOpen","Accordion","contentRef","maxHeight","toggleAccordion","scrollHeight","bodyStyles","FilterView","accordion","filterOptions","resetSelected","onFilterSave","showHandler","filterBody","Checkbox","checked","onChange","e","currentTarget","label","inline","buttonLabel","FilterController","checkedIds","defaultCheckedIds","onCheckboxChange","updatedIds","concat","filter","i","isFiltersChanged","isChecked","checkedId","newCheckedIds","some","element","includes","renderTitle","insertSelectedFilter","ids","CollapsibleHandler","prepareFilterOptionsData","Object","keys","selectedFilters","filterGroup","name","isFilterGroupExists","removeSelectedFilterFromGroup","MENU_RESPONSIVE_CONFIG","FiltersController","filterItemRender","checkedIdsData","childProps","content","updateData","addSelectedFilters","getAvailableFilters","filtersOptions","mapDispatchToProps","onSelectedFilterRemove","response","ConnectedFiltersController","connect","search","noop","PillItem","removable","groupId","isActiveHandler","Pills","getPills","pillGroupData","pillData","emptyDataMessage","showEmptyState","pillsLabel","SelectedFiltersComponent","onRemove","preparePillsData","optionData","group","option","Boolean","ConnectedSelectedFiltersComponent","SearchPageController","App","defaultState","rootReducer","combineReducers","action","console","log","store","createStore","compose","applyMiddleware","thunk","ROOT_ELEMENT","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.44cc4f07.chunk.js","sourcesContent":["import React, {ReactNode} from 'react';\r\nimport classNames from 'classnames';\r\nimport './styles.scss';\r\n\r\ntype Props = {\r\n    children: ReactNode,\r\n    cssClass: string\r\n}\r\n\r\nconst headerClassName = 'header';\r\n\r\nexport const Header = ({cssClass, children}: Props) => {\r\n    const classes = classNames(headerClassName, cssClass);\r\n\r\n    return (\r\n        <header className={classes}>\r\n            <div className=\"grid\">\r\n                {children}\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nHeader.defaultProps = {\r\n    cssClass: ''\r\n};\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './styles.scss';\r\n\r\ntype Props = {\r\n    cssClass: string\r\n}\r\n\r\nconst LINK_TITLE = 'i_lavs shop';\r\n\r\nexport const Logo = ({cssClass}: Props) => {\r\n    return (\r\n        <a href=\"/\" className={classNames('logo', cssClass)} title={LINK_TITLE}>\r\n            <img\r\n                src={`${process.env.PUBLIC_URL}/images/app-logo.png`}\r\n                width={40}\r\n                height={46}\r\n                alt=\"i_lavs e-commerce shop logo\"/>\r\n            <span className=\"logo__text\">Lavs Shop</span>\r\n        </a>\r\n    )\r\n};\r\n\r\nLogo.defaultProps = {\r\n    cssClass: ''\r\n};\r\n\r\n","import React, {ReactNode} from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n    cssClass: string,\n    children: ReactNode\n};\n\nconst pageClassName = 'page';\n\nexport const PageComponent = ({children, cssClass}: Props) => {\n    return (\n        <div className={classNames(pageClassName, cssClass)}>\n            {children}\n        </div>\n    )\n};\n\nPageComponent.defaultProps = {\n    cssClass: ''\n};\n","export const MENU_CSS_CLASSES = {\n    menu: 'smart-menu',\n    menuWrapped: 'smart-menu_wrapped',\n    menuList: 'smart-menu__list',\n    menuItem: 'smart-menu__item',\n    menuItemActive: 'smart-menu__item_active',\n    menuLink: 'smart-menu__link',\n};","import React, {ReactNode} from 'react';\nimport classNames from 'classnames';\nimport {MENU_CSS_CLASSES} from \"./constants\";\n\nexport type MenuItemData = {\n    id: string,\n    title: string,\n    itemCssClass?: string,\n    children: any[]\n};\n\nexport type MenuItemProps = MenuItemData & {\n    childrenRenderer?: (props: MenuItemData) => ReactNode\n}\n\nexport const SmartMenuItemComponent = (props: MenuItemProps) => {\n    const {childrenRenderer, ...menuItemData} = props;\n\n    if(typeof childrenRenderer !== 'function') {\n        return null;\n    }\n\n    return (\n        <div className={classNames(MENU_CSS_CLASSES.menuItem)}>\n            {childrenRenderer(menuItemData)}\n        </div>\n    );\n};\n\nSmartMenuItemComponent.defaultProps = {\n    itemCssClass: ''\n};\n","import React, {Component, ReactNode} from 'react';\nimport classNames from 'classnames';\nimport {MENU_CSS_CLASSES} from './constants';\nimport {SmartMenuItemComponent, MenuItemProps, MenuItemData} from './smart-menu-item.component';\nimport \"./styles.scss\";\n\ntype ResponsiveConfig = {\n    maxWidth: number,\n    wrapItems: boolean,\n    visibleItems: number\n}\n\ntype Props = {\n    data: MenuItemProps[],\n    cssClass: string,\n    menuItemRenderer?: (data: MenuItemData) => ReactNode,\n    wrappedItemsRenderer?: (data: MenuItemData) => ReactNode,\n    wrappedItemsTitle: string,\n    responsive: ResponsiveConfig[]\n};\n\ntype State = {\n    windowWidth: number\n};\n\nconst TIMEOUT_DELAY = 150;\n\nexport class SmartMenuComponent extends Component<Props, State> {\n    resizeTimer: number = 0;\n\n    state = {\n        windowWidth: window.innerWidth,\n        responsive: this.props.responsive.sort((a, b) => {\n            return a.maxWidth < b.maxWidth ? -1 : 1;\n        })\n    };\n\n    static defaultProps = {\n        cssClass: '',\n        responsive: [],\n        wrappedItemsTitle: 'Other'\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', this.onResize);\n    }\n\n    componentWillUnmount = () => {\n        window.removeEventListener('resize', this.onResize)\n    };\n\n    onResize = () => {\n        window.clearTimeout(this.resizeTimer);\n\n        this.resizeTimer = window.setTimeout(() => {\n            this.setState({windowWidth: window.innerWidth})\n        }, TIMEOUT_DELAY);\n    };\n\n    prepareMenuItems = () => {\n        const {data} = this.props;\n        const {responsive, windowWidth} = this.state;\n\n        if (responsive.length !== 0) {\n            const matchedBreakpoint = this.getMatchedBreakpoint(responsive, windowWidth);\n\n            if (matchedBreakpoint && matchedBreakpoint.wrapItems) {\n                const visibleItems = data.slice(0, matchedBreakpoint.visibleItems);\n                const wrappedItems = data.slice(matchedBreakpoint.visibleItems, data.length);\n\n                return (\n                    <>\n                        {this.mapVisibleItems(visibleItems)}\n                        {this.mapWrappedItems(wrappedItems)}\n                    </>\n                );\n            }\n        }\n\n        return this.mapVisibleItems(data);\n    };\n\n    mapVisibleItems = (data: MenuItemProps[]) => {\n        const {menuItemRenderer} = this.props;\n\n        return data.map(itemData => (\n                <SmartMenuItemComponent\n                    {...itemData}\n                    key={itemData.id}\n                    childrenRenderer={menuItemRenderer}\n                />\n            )\n        );\n    };\n\n    getMatchedBreakpoint = (responsive: ResponsiveConfig[], windowWidth: number) => {\n        return responsive.find(item => windowWidth <= item.maxWidth);\n    };\n\n    mapWrappedItems = (wrappedItems: MenuItemProps[]) => {\n        const {wrappedItemsRenderer, wrappedItemsTitle} = this.props;\n        if (wrappedItems.length === 0) {\n            return null;\n        }\n\n        return (\n            <SmartMenuItemComponent\n                id={wrappedItemsTitle}\n                title={wrappedItemsTitle}\n                key=\"wrapped options\"\n                childrenRenderer={wrappedItemsRenderer}\n                children={wrappedItems}\n            />\n        );\n    };\n\n    render() {\n        const {cssClass} = this.props;\n        const {responsive, windowWidth} = this.state;\n\n        return (\n            <nav className={classNames(MENU_CSS_CLASSES.menu, cssClass, {\n                [MENU_CSS_CLASSES.menuWrapped]: this.getMatchedBreakpoint(responsive, windowWidth)\n            })}>\n                <div className={MENU_CSS_CLASSES.menuList}>\n                    {this.prepareMenuItems()}\n                </div>\n            </nav>\n        );\n    }\n}\n","import data from './data.json';\nimport {Dispatch} from 'redux';\nimport {GET_FILTERS_DATA, ADD_SELECTED_FILTER, REMOVE_SELECTED_FILTER} from './constants';\nimport {SelectedFilter} from \"./reducers\";\n\n\nexport const getAvailableFilters = () => (dispatch: Dispatch) => dispatch({\n    type: GET_FILTERS_DATA,\n    payload: {\n        response: data[0]\n    }\n});\n\nexport const addSelectedFilters = (selectedFilters: SelectedFilter[]) => (dispatch: Dispatch) => (\n    dispatch({\n        type: ADD_SELECTED_FILTER,\n        payload: {selectedFilters}\n    })\n);\n\nexport const removeSelectedFilter = (key: string, id: string) => (dispatch: Dispatch) => (\n    dispatch({\n        type: REMOVE_SELECTED_FILTER,\n        payload: {id, key}\n    })\n);\n\n","const GET_FILTERS_DATA = 'GET_FILTERS_DATA';\nconst REMOVE_SELECTED_FILTER = 'REMOVE_SELECTED_FILTER';\nconst ADD_SELECTED_FILTER = 'ADD_SELECTED_FILTER';\n\nexport {\n    GET_FILTERS_DATA,\n    REMOVE_SELECTED_FILTER,\n    ADD_SELECTED_FILTER,\n};","import React, {FormEvent, PureComponent, ReactNode} from 'react';\nimport classNames from 'classnames';\nimport './styles.scss';\n\ntype Props = {\n    type: string, // @todo exact type annotation for type prop\n    caption?: ReactNode,\n    handler: (e: FormEvent<HTMLButtonElement>) => void,\n    disabled: boolean\n};\n\nconst BTN_CSS_CLASSES = {\n    btn: 'btn',\n    default: 'btn_default',\n    primary: 'btn_primary'\n};\n\nexport const BTN_TYPES = {\n    default: 'default',\n    primary: 'primary'\n};\n\nexport class Button extends PureComponent<Props> {\n    static defaultProps = {\n        type: BTN_TYPES.default,\n        disabled: false\n    };\n\n    render() {\n        const {type, caption, handler, disabled} = this.props;\n\n        const btnClasses = classNames(BTN_CSS_CLASSES.btn, {\n            [BTN_CSS_CLASSES.default]: type === BTN_TYPES.default,\n            [BTN_CSS_CLASSES.primary]: type === BTN_TYPES.primary\n        });\n\n        return (\n            <button className={btnClasses}\n                    onClick={handler}\n                    disabled={disabled}>\n                {caption ? caption : null}\n            </button>\n        );\n    }\n}\n","import React, {ReactNode} from 'react';\nimport {Button, BTN_TYPES} from \"../../../../../components/core/button\";\n\ntype Props = {\n    changed: boolean,\n    onSave: () => void,\n    onClose: () => void,\n    children: ReactNode\n};\n\nexport const FilterBody = (props: Props) => {\n    const {children, changed, onSave, onClose} = props;\n\n    return (\n        <div className=\"dropdown-filter\">\n            <div className=\"dropdown-filter__body\">\n                {children}\n            </div>\n\n            <footer className=\"dropdown-filter__footer\">\n                <Button type={BTN_TYPES.primary} caption=\"Save\" handler={onSave}/>\n\n                {changed ? (\n                    <Button caption=\"Close\" handler={onClose}/>\n                ) : null}\n            </footer>\n        </div>\n    );\n};\n\nFilterBody.defaultProps = {\n    changed: false\n};","import React, {Component, createRef, ReactNode, RefObject} from 'react';\r\nimport classNames from 'classnames';\r\nimport './styles.scss';\r\n\r\n\r\ntype Props = {\r\n    isOpen: boolean,\r\n    onOpen: () => void,\r\n    onClose: () => void,\r\n    caption: ReactNode,\r\n    children: ReactNode,\r\n    cssClass: string,\r\n};\r\n\r\nconst CSS_CLASSES = {\r\n    wrapper: 'dropdown',\r\n    bottom: 'dropdown_bottom',\r\n    body: 'dropdown__body',\r\n    handler: 'dropdown__handler',\r\n    handlerActive: 'dropdown__handler_active'\r\n};\r\n\r\nexport class Dropdown extends Component<Props> {\r\n    setWrapperRef: RefObject<HTMLDivElement> = createRef();\r\n    dropdownBodyRef: RefObject<HTMLDivElement> = createRef();\r\n\r\n    static defaultProps = {\r\n        cssClass: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n        document.addEventListener('resize', this.recalculateStyles);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n        document.removeEventListener('resize', this.recalculateStyles);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.recalculateStyles();\r\n    }\r\n\r\n    recalculateStyles = () => {\r\n        if (this.props.isOpen) {\r\n            const refElement = this.dropdownBodyRef && this.dropdownBodyRef.current;\r\n\r\n            if (refElement) {\r\n                refElement.style.left = '';\r\n\r\n                window.requestAnimationFrame(() => {\r\n                    const boundingEl = refElement.getBoundingClientRect();\r\n                    const isOutOfRight = boundingEl.right > window.innerWidth;\r\n\r\n                    refElement.style.left = isOutOfRight ?\r\n                        `${window.innerWidth - boundingEl.right - 20}px` : `-10px`;\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    bodyRender = () => {\r\n        if (this.props.isOpen) {\r\n            return (\r\n                <div\r\n                    className={CSS_CLASSES.body}\r\n                    ref={this.dropdownBodyRef}>\r\n                    {this.props.children}\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    handleClickOutside = (event: any) => {\r\n        const refEl = this.setWrapperRef && this.setWrapperRef.current;\r\n\r\n        if (\r\n            this.props.isOpen &&\r\n            refEl && !refEl.contains(event.target)\r\n        ) {\r\n            this.props.onClose();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {caption, isOpen, cssClass} = this.props;\r\n        const classes = classNames(CSS_CLASSES.handler, {[CSS_CLASSES.handlerActive]: isOpen});\r\n\r\n        return (\r\n            <div\r\n                className={classNames(\r\n                    CSS_CLASSES.wrapper, {\r\n                        [CSS_CLASSES.bottom]: isOpen,\r\n                        [cssClass]: cssClass\r\n                    }\r\n                )}\r\n                ref={this.setWrapperRef}>\r\n\r\n                <a href=\"#\"\r\n                   className={classes}\r\n                   onClick={this.props.onOpen}>\r\n                    {caption}\r\n                    <span className=\"arrow\"/>\r\n                </a>\r\n\r\n                {this.bodyRender()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component, createRef, ReactNode, RefObject} from 'react';\nimport classNames from 'classnames';\nimport './styles.scss';\n\ntype Props = {\n    cssClass: string,\n    children: ReactNode,\n    title: ReactNode,\n    isOpen: boolean,\n    handler: () => void\n};\n\ntype State = {\n    maxHeight: number\n};\n\nconst CSS_CLASSES = {\n    wrapper: 'accordion',\n    header: 'accordion__header',\n    body: 'accordion__body',\n    content: 'accordion__content'\n};\n\nexport class Accordion extends Component<Props, State> {\n    contentRef: RefObject<HTMLDivElement> = createRef();\n\n    state = {\n        maxHeight: 0\n    };\n\n    static defaultProps = {\n        cssClass: '',\n        isOpen: false\n    };\n\n    componentDidUpdate({isOpen}: Props) {\n        if (this.contentRef.current && isOpen !== this.props.isOpen) {\n            const target = this.contentRef.current;\n\n            this.setState(state => ({\n                maxHeight: state.maxHeight ? 0 : target.scrollHeight\n            }));\n        }\n    }\n\n    toggleAccordion = () => {\n        this.props.handler();\n    };\n\n    render() {\n        const {title, children, cssClass} = this.props;\n        const {maxHeight} = this.state;\n        const bodyStyles = {maxHeight};\n\n        return (\n            <div className={classNames(CSS_CLASSES.wrapper, {[cssClass]: cssClass})}>\n                <header className={CSS_CLASSES.header} onClick={this.toggleAccordion}>\n                    {title}\n                </header>\n\n                <div className={CSS_CLASSES.body} style={bodyStyles} ref={this.contentRef}>\n                    <div className={CSS_CLASSES.content}>\n                        {children}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport {Dropdown} from \"../../../../../components/core/dropdown\";\nimport {Accordion} from \"../../../../../components/core/accordion\";\nimport {FilterBody} from \"./filter-body.component\";\nimport {ChildrenProps} from \"./filter.controller\";\n\n\ntype Props = ChildrenProps & {\n    accordion: boolean\n};\n\nexport const FilterView = (props: Props) => {\n    const {\n        title,\n        accordion,\n        filterOptions,\n        isOpen,\n        resetSelected,\n        onFilterSave,\n        changed,\n        showHandler\n    } = props;\n\n    const filterBody = (\n        <FilterBody\n            changed={changed}\n            onClose={resetSelected}\n            onSave={onFilterSave}>\n            {filterOptions}\n        </FilterBody>\n    );\n\n    if (accordion) {\n        return (\n            <Accordion title={title} isOpen={isOpen} handler={showHandler}>\n                {filterBody}\n            </Accordion>\n        );\n    }\n\n    return (\n        <Dropdown\n            caption={title}\n            onClose={resetSelected}\n            onOpen={() => showHandler()}\n            isOpen={isOpen}>\n            {filterBody}\n        </Dropdown>\n    );\n};\n\nFilterView.defaultProps = {\n    isOpen: false,\n    accordion: false\n};\n","import React, {ChangeEvent, Component} from 'react';\nimport classNames from 'classnames';\nimport './styles.scss';\n\ntype Props = {\n    cssClass: string\n    id: string,\n    onChange: (id: string, checked: boolean) => void,\n    checked: boolean,\n    disabled: boolean,\n    label: string,\n    buttonLabel: boolean,\n    inline: boolean\n};\n\ntype State = {\n  checked: boolean\n};\n\nconst CSS_CLASSES = {\n    wrap: 'checkbox-wrap',\n    inline: 'checkbox-wrap_inline',\n    checkbox: 'checkbox',\n    checked: 'checkbox_checked',\n    label: 'checkbox__label',\n    labelBtn: 'checkbox_button',\n    input: 'checkbox__input',\n    checkmark: 'checkbox__checkmark'\n};\n\nexport class Checkbox extends Component<Props, State> {\n    static defaultProps = {\n        disabled: false,\n        checked: false,\n        cssClass: '',\n        inline: false,\n        buttonLabel: false,\n        label: ''\n    };\n\n    state = {\n      checked: this.props.checked\n    };\n\n    onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const target = e.currentTarget;\n        const checked = !this.state.checked;\n\n        this.setState(state => ({checked}));\n        this.props.onChange(target.id, checked);\n    };\n\n    render() {\n        const {cssClass, label, inline, buttonLabel, id} = this.props;\n        const {checked} = this.state;\n        return (\n            <div className={classNames(CSS_CLASSES.wrap, {\n                [CSS_CLASSES.inline]: inline,\n                [cssClass]: cssClass\n            })}>\n                <label className={\n                    classNames(CSS_CLASSES.checkbox, {\n                        [CSS_CLASSES.checked]: checked,\n                        [CSS_CLASSES.labelBtn]: buttonLabel\n                    })\n                }>\n                    <input\n                        id={id}\n                        type=\"checkbox\"\n                        onChange={this.onChange}\n                        className={CSS_CLASSES.input} />\n\n                    <span className={CSS_CLASSES.checkmark}/>\n\n                    {label && (\n                        <span className={CSS_CLASSES.label}>{label}</span>\n                    )}\n                </label>\n            </div>\n        );\n    }\n}","import React, {Component, ReactNode} from 'react';\nimport {Checkbox} from \"../../../../../components/core/checkbox\";\nimport {FilterItemType} from \"../../../services/reducers\";\nimport {FilterUpdateData} from \"../../../services/utils\";\n\nexport type ChildrenProps = {\n    isOpen: boolean,\n    changed: boolean,\n    filterOptions: ReactNode[] | null,\n    resetSelected: () => void,\n    onFilterSave: () => void,\n    showHandler: () => void,\n    title: string,\n};\n\ntype Props = {\n    title: string,\n    data: FilterItemType[],\n    isOpen: boolean,\n    checkedIds: string[],\n    showHandler: () => void,\n    insertSelectedFilter: (updateData: FilterUpdateData) => void,\n    children: (props: ChildrenProps) => ReactNode\n};\n\ntype State = {\n    changed: boolean,\n    checkedIds: string[],\n    defaultCheckedIds: string[]\n};\n\nexport class FilterController extends Component<Props, State> {\n    state = {\n        changed: false,\n        checkedIds: this.props.checkedIds,\n        defaultCheckedIds: this.props.checkedIds\n    };\n\n    static defaultProps = {\n        accordion: false\n    };\n\n    componentDidUpdate() {\n        const {checkedIds} = this.props;\n\n        if (this.isFiltersChanged(checkedIds)) {\n            this.setState({\n                checkedIds,\n                defaultCheckedIds: checkedIds,\n                changed: false\n            });\n        }\n    }\n\n    onCheckboxChange = (id: string, checked: boolean) => {\n        const {checkedIds} = this.state;\n        const updatedIds = checked ?\n            checkedIds.concat(id) :\n            checkedIds.filter(i => i !== id);\n\n        this.setState({\n            changed: this.isFiltersChanged(updatedIds),\n            checkedIds: updatedIds\n        });\n    };\n\n    isChecked = (id: string) => {\n        const {checkedIds} = this.state;\n\n        return !!checkedIds.find(checkedId => checkedId === id);\n    };\n\n    isFiltersChanged = (newCheckedIds: string[]) => {\n        const {defaultCheckedIds} = this.state;\n\n        if (defaultCheckedIds.length !== newCheckedIds.length) {\n            return true;\n        }\n\n        return defaultCheckedIds.some(element => !newCheckedIds.includes(element));\n    };\n\n    renderTitle = () => {\n        const {title} = this.props;\n        const {checkedIds} = this.state;\n\n        return checkedIds.length > 0 ? `${title} (${checkedIds.length})` : title;\n    };\n\n    onFilterSave = () => {\n        const {insertSelectedFilter, title} = this.props;\n        const {checkedIds} = this.state;\n\n        insertSelectedFilter({key: title, ids: checkedIds});\n        this.props.showHandler();\n    };\n\n    resetSelected = () => {\n        this.setState({\n            checkedIds: this.props.checkedIds,\n            changed: false\n        });\n\n        this.props.showHandler();\n    };\n\n    render() {\n        const {data, children, isOpen, showHandler} = this.props;\n        const {changed} = this.state;\n\n        const filterOptions = data ? data.map(({id, title}) => (\n            <Checkbox\n                key={`${id}-${changed}`}\n                id={id}\n                label={title}\n                checked={this.isChecked(id)}\n                onChange={this.onCheckboxChange}\n                inline={true}\n                buttonLabel={true}\n                cssClass=\"dropdown-filter__option\"\n            />\n        )) : null;\n\n        return children({\n            isOpen,\n            filterOptions,\n            showHandler,\n            changed,\n            resetSelected: this.resetSelected,\n            onFilterSave: this.onFilterSave,\n            title: this.renderTitle(),\n        })\n    }\n}","import {Component, ReactNode} from 'react';\n\n\ntype ChildrenProps = {\n    isOpen: boolean,\n    handler: () => void,\n};\n\ntype Props = {\n    children: (props: ChildrenProps) => ReactNode\n}\n\ntype State = {\n    isOpen: boolean\n};\n\nexport class CollapsibleHandler extends Component<Props, State> {\n    state = {\n        isOpen: false\n    };\n\n    handler = () => {\n        this.setState(state => ({isOpen: !state.isOpen}))\n    };\n\n    render() {\n        const {isOpen} = this.state;\n\n        return this.props.children({\n            handler: this.handler,\n            isOpen\n        });\n    }\n}","import {FilterOptionsDataType} from \"../types\";\nimport {SelectedFilter} from \"../reducers\";\n\nexport const prepareFilterOptionsData = (data: FilterOptionsDataType) => {\n    return Object.keys(data).map(key => {\n        const children = data[key];\n        return {\n            id: key,\n            title: key,\n            children\n        }\n    });\n};\n\nconst isFilterGroupExists = (selectedFilters: SelectedFilter[], key: string) => (\n    selectedFilters.find(filterGroup => {\n        return filterGroup.name === key\n    })\n);\n\n\nexport type FilterUpdateData = { key: string, ids: string[] };\n\nexport const insertSelectedFilter = (\n    selectedFilters: SelectedFilter[], {key, ids}: FilterUpdateData\n) => {\n    if (isFilterGroupExists(selectedFilters, key)) {\n        return selectedFilters.map(filterGroup => (\n            filterGroup.name === key ? ({\n                ...filterGroup,\n                checkedIds: ids\n            }) : filterGroup\n        ));\n    }\n\n    return selectedFilters.concat({\n        name: key,\n        checkedIds: ids\n    })\n};\n\nexport const removeSelectedFilterFromGroup = (\n    selectedFilters: SelectedFilter[],\n    payload: {key: string, id: string}\n) => {\n    return selectedFilters.map(item => {\n        if (item.name === payload.key) {\n            const checkedIds = item.checkedIds.filter(id => id !== payload.id);\n\n            return {...item, checkedIds} ;\n        }\n        return item;\n    }).filter(item => item.checkedIds.length);\n};","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {AppState} from \"../../../../services/reducers\";\nimport {SmartMenuComponent} from \"../../../../components/smart-menu\";\nimport {MenuItemData} from \"../../../../components/smart-menu/smart-menu-item.component\";\nimport {addSelectedFilters, getAvailableFilters, removeSelectedFilter} from \"../../services/actions\";\nimport {SelectedFilter, FilterItemType} from '../../services/reducers';\nimport {FilterController, FilterView} from './components';\nimport './styles.scss';\nimport {Dropdown} from \"../../../../components/core/dropdown\";\nimport {CollapsibleHandler} from \"../../../../components/collapsible-handler\";\nimport {ChildrenProps} from \"./components/filter.controller\";\nimport {Button} from \"../../../../components/core/button\";\nimport {FilterUpdateData, insertSelectedFilter} from \"../../services/utils\";\n\n\ntype FilterItemData = {\n    id: string,\n    title: string\n    children?: FilterItemData[]\n};\n\ntype OwnProps = {};\n\ntype StateProps = {\n    selectedFilters: SelectedFilter[],\n    filtersOptions?: FilterItemType[]\n};\n\ntype DispatchProps = {\n    getAvailableFilters: () => void\n    onSelectedFilterRemove: (key: string, id: string) => void,\n    addSelectedFilters: (selectedFilters: SelectedFilter[]) => void\n};\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ntype State = {\n    searchQuery: string\n};\n\nconst MENU_RESPONSIVE_CONFIG = [{\n    maxWidth: 980,\n    wrapItems: true,\n    visibleItems: 4\n}, {\n    maxWidth: 767,\n    wrapItems: true,\n    visibleItems: 3\n}, {\n    maxWidth: 480,\n    wrapItems: true,\n    visibleItems: 2\n}];\n\nexport class FiltersController extends Component<Props, State> {\n    componentDidMount() {\n        this.props.getAvailableFilters();\n    }\n\n    filterItemRender = (data: MenuItemData, accordion: boolean = false) => {\n        const {selectedFilters} = this.props;\n        const checkedIdsData = selectedFilters.find(item => item.name === data.id);\n\n        return (\n            <CollapsibleHandler key={data.title} children={({isOpen, handler}) => (\n                <FilterController\n                    title={data.title}\n                    data={data.children}\n                    isOpen={isOpen}\n                    showHandler={handler}\n                    checkedIds={checkedIdsData ? checkedIdsData.checkedIds : []}\n                    insertSelectedFilter={this.insertSelectedFilter}\n                    children={(childProps: ChildrenProps) => (\n                        <FilterView {...childProps} accordion={accordion}/>\n                    )}\n                />\n            )}/>\n        );\n    };\n\n    wrappedItemsRenderer = (data: MenuItemData) => {\n        const content = data.children.map(\n            filter => this.filterItemRender(filter, true)\n        );\n\n        return (\n            <CollapsibleHandler children={\n                ({isOpen, handler}) => (\n                    <Dropdown\n                        cssClass=\"wrapped-options\"\n                        isOpen={isOpen}\n                        onClose={handler}\n                        onOpen={handler}\n                        caption={data.title}>\n                        {content}\n                        <div><Button handler={handler} caption=\"Close\"/></div>\n                    </Dropdown>\n                )}\n            />\n        );\n    };\n\n    insertSelectedFilter = (updateData: FilterUpdateData) => {\n        const {selectedFilters} = this.props;\n\n        this.props.addSelectedFilters(insertSelectedFilter(selectedFilters, updateData));\n    };\n\n    render() {\n        const {filtersOptions} = this.props;\n\n        return (\n            <div className=\"filter-bar\">\n                <div className=\"filter-bar__inner-wrap\">\n                    <div className=\"grid\">\n                        <SmartMenuComponent\n                            data={filtersOptions || []}\n                            menuItemRenderer={this.filterItemRender}\n                            responsive={MENU_RESPONSIVE_CONFIG}\n                            wrappedItemsRenderer={this.wrappedItemsRenderer}\n                            wrappedItemsTitle=\"More Filters\"\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n    filtersOptions: state.search.filtersOptions,\n    selectedFilters: state.search.selectedFilters,\n});\n\nconst mapDispatchToProps: DispatchProps = ({\n    onSelectedFilterRemove: removeSelectedFilter,\n    getAvailableFilters: getAvailableFilters,\n    addSelectedFilters: addSelectedFilters\n});\n\nexport const ConnectedFiltersController =\n    connect(mapStateToProps, mapDispatchToProps)(FiltersController);","/*\n* Placeholder func\n */\n\nexport const noop = () => {};","import React from 'react';\r\nimport {PillData} from './pills.component';\r\nimport {noop} from \"../utils\";\r\n\r\ntype Handler = {\r\n    handler: (key: string, id: string) => void\r\n}\r\n\r\ntype Props = Handler & PillData;\r\n\r\nexport const PillItem = ({removable, handler, id, groupId, caption, disabled}: Props) => {\r\n    const isActiveHandler = removable && !disabled;\r\n    return (\r\n        <div className=\"pill\" onClick={isActiveHandler ? () => handler(groupId, id) : noop}>\r\n            <span className=\"pill__name\">{caption}</span>\r\n            {isActiveHandler && (<button className=\"pill__remove-btn\"/>)}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {Component, ReactNode} from 'react';\r\nimport classNames from 'classnames';\r\nimport {PillItem} from \"./pill-item.component\";\r\nimport './styles.scss';\r\n\r\nexport type PillData = {\r\n    removable: boolean,\r\n    id: string,\r\n    groupId: string,\r\n    caption: string,\r\n    disabled: boolean\r\n}\r\n\r\nexport type Props = {\r\n    label: ReactNode,\r\n    data: any[],  // TODO: add correct annotation\r\n    handler: (key: string, id: string) => void,\r\n    emptyDataMessage: ReactNode,\r\n    cssClass: string\r\n}\r\n\r\nexport class Pills extends Component<Props> {\r\n    static defaultProps = {\r\n        data: {},\r\n        emptyDataMessage: 'No data.',\r\n        cssClass: ''\r\n    };\r\n\r\n    getPills = () => {\r\n        const {data, handler} = this.props;\r\n\r\n        return data.map(pillGroupData => {\r\n            if(pillGroupData.children.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div className=\"pills-stripe__group\" key={pillGroupData.name}>\r\n                    <span className=\"pills-stripe__group-label\">{pillGroupData.name}</span>\r\n                    {\r\n                        pillGroupData.children.map(\r\n                            (pillData: PillData) => (\r\n                                <PillItem key={pillData.id} handler={handler} {...pillData} />\r\n                            )\r\n                        )\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {label, data, emptyDataMessage, cssClass} = this.props;\r\n        const showEmptyState = Object.keys(data).length === 0;\r\n\r\n        return (\r\n            <div className={classNames('pills-stripe-wrap', {[cssClass]: cssClass})}>\r\n                <div className={classNames('pills-stripe', {[cssClass]: cssClass})}>\r\n                    {label && (\r\n                        <div className=\"pills-stripe__heading\">{label}</div>\r\n                    )}\r\n\r\n                    {this.getPills()}\r\n\r\n                    {showEmptyState && (\r\n                        <div className=\"pills-stripe__no-data-msg\">\r\n                            {emptyDataMessage}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\nimport {Pills} from \"../../../../components/core/pills\";\nimport {connect} from \"react-redux\";\nimport {removeSelectedFilter} from \"../../services/actions\";\nimport {FilterItemType, SelectedFilter} from \"../../services/reducers\";\nimport {AppState} from \"../../../../services/reducers\";\n\ntype StateProps = {\n    selectedFilters: SelectedFilter[],\n    filtersOptions?: FilterItemType[]\n};\n\ntype OwnProps = {\n    cssClass: string\n};\n\ntype DispatchProps = {\n    onSelectedFilterRemove: (key: string, id: string) => void\n};\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nconst pillsLabel = <h3>Applied filters:</h3>;\n\nexport class SelectedFiltersComponent extends Component<Props> {\n    onRemove = (key: string, id: string) => {\n        this.props.onSelectedFilterRemove(key, id);\n    };\n\n    preparePillsData = () => {\n        const {selectedFilters, filtersOptions} = this.props;\n\n        if (filtersOptions) {\n            // TODO: outsource to util file\n            return selectedFilters.map(item => {\n                const optionData = filtersOptions.find(group => group.id === item.name);\n                const children = optionData ?\n                    item.checkedIds.map(id => {\n                        const data = optionData.children.find(option => id === option.id);\n                        return data ? {\n                            id: data.id,\n                            groupId: item.name,\n                            caption: data.title,\n                            removable: true,\n                            disabled: false\n                        } : null\n                    }).filter(Boolean) : [];\n                return {\n                    ...item,\n                    children\n                }\n            });\n        }\n\n        return [];\n    };\n\n    render() {\n        const {cssClass} = this.props;\n        return (\n            <div className=\"grid\">\n                <Pills\n                    cssClass={cssClass}\n                    handler={this.onRemove}\n                    data={this.preparePillsData()}\n                    label={pillsLabel}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n    selectedFilters: state.search.selectedFilters,\n    filtersOptions: state.search.filtersOptions\n});\n\nconst mapDispatchToProps: DispatchProps = ({\n    onSelectedFilterRemove: removeSelectedFilter\n});\n\nexport const ConnectedSelectedFiltersComponent =\n    connect(mapStateToProps, mapDispatchToProps)(SelectedFiltersComponent);","import React from 'react';\nimport {PageComponent} from '../../components/core/page';\nimport {ConnectedFiltersController} from \"./components/filter-bar\";\nimport {ConnectedSelectedFiltersComponent} from './components/selected-filters';\nimport './styles.scss';\n\ntype Props = {};\n\nexport const SearchPageController = (props: Props) => {\n    return (\n        <PageComponent cssClass=\"search-page\">\n            <ConnectedFiltersController/>\n\n            <ConnectedSelectedFiltersComponent cssClass=\"search-page__applied-filters\"/>\n        </PageComponent>\n    );\n};\n","import React, {FunctionComponent} from 'react';\nimport {Header} from \"../header\";\nimport {Logo} from '../../components/logo';\nimport {SearchPageController} from \"../../modules/search\";\nimport '../../assets/styles/common.scss';\n\nconst App: FunctionComponent = () => {\n    return (\n        <div className=\"app\">\n            <Header>\n                <Logo cssClass=\"header__logo\"/>\n            </Header>\n\n            <SearchPageController/>\n        </div>\n    );\n};\n\nexport default App;\n","import {AnyAction} from \"redux\";\nimport {\n    GET_FILTERS_DATA,\n    REMOVE_SELECTED_FILTER,\n    ADD_SELECTED_FILTER\n} from './constants';\nimport {\n    prepareFilterOptionsData,\n    removeSelectedFilterFromGroup\n} from './utils';\n\nexport type FilterItemDataType = {\n    id: string,\n    title: string,\n}\n\nexport type FilterItemType = {\n    id: string,\n    title: string,\n    children: FilterItemDataType[]\n};\n\nexport type SelectedFilter = {\n    name: string,\n    checkedIds: string[]\n};\n\ntype SearchState = {\n    selectedFilters: SelectedFilter[],\n    filtersOptions: FilterItemType[]\n};\n\nconst defaultState = {\n    selectedFilters: [\n        {\n            name: 'construction',\n            checkedIds: ['hand loomed', 'dhurrie']\n        },\n        {\n            name: 'material',\n            checkedIds: ['synthetics', 'jute & natural fibers',]\n        }],\n    filtersOptions: []\n};\n\nexport const search = (state: SearchState = defaultState, action: AnyAction) => {\nconsole.log(action.type);\n    switch (action.type) {\n        case GET_FILTERS_DATA:\n            return {\n                ...state,\n                filtersOptions: prepareFilterOptionsData(action.payload.response)\n            };\n\n        case REMOVE_SELECTED_FILTER:\n            return {\n                ...state,\n                selectedFilters: removeSelectedFilterFromGroup(state.selectedFilters, action.payload)\n            };\n\n        case ADD_SELECTED_FILTER:\n            return {\n                ...state,\n                selectedFilters: action.payload.selectedFilters\n            };\n\n        default:\n            return state\n    }\n};\n","import {combineReducers} from 'redux';\nimport {search} from \"../modules/search/services/reducers\";\n\nexport const rootReducer = combineReducers({\n    search\n});\n\nexport type AppState = ReturnType<typeof rootReducer>","import {applyMiddleware, createStore, compose} from 'redux';\nimport {rootReducer} from '../services';\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(\n    rootReducer,\n    {},\n    compose(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport App from './layout/root/app';\nimport {store} from './store';\n\nconst ROOT_ELEMENT = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}><App/></Provider>,\n    ROOT_ELEMENT\n);\n"],"sourceRoot":""}